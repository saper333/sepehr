

[
  
  
    
    
      {
        "title": "An Example Markdown Post",
        "excerpt": "Example Markdown Post\n",
        "content": "Example Markdown Post\n\nBasic setup\n\nJekyll requires blog post files to be named according to the following format:\n\nYEAR-MONTH-DAY-filename.md\n\nWhere YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files.\n\nThe first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above.\n\nBasic formatting\n\nYou can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule:\n\n\n\nLists\n\nHere’s a list:\n\n\n  item 1\n  item 2\n\n\nAnd a numbered list:\n\n\n  item 1\n  item 2\n\n\nBoxes and stuff\n\n\n  This is a quotation\n\n\n\n   \n   You can include alert boxes\n\n\n…and…\n\n\n   \n   You can include info boxes\n\n\nImages\n\n\n\nCode\n\nYou can format text and code per usual\n\nGeneral preformatted text:\n\n# Do a thing\ndo_thing()\n\n\nPython code and output:\n\n# Prints '2'\nprint(1+1)\n\n\n2\n\n\nFormatting text as shell commands:\n\necho \"hello world\"\n./some_script.sh --option \"value\"\nwget https://example.com/cat_photo1.png\n\n\nFormatting text as YAML:\n\nkey: value\n- another_key: \"another value\"\n\n\nTables\n\n\n  \n    \n      Column 1\n      Column 2\n    \n  \n  \n    \n      A thing\n      Another thing\n    \n  \n\n\nTweetcards\n\nAltair 4.0 is released! https://t.co/PCyrIOTcvvTry it with:  pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ&mdash; Jake VanderPlas (@jakevdp) December 11, 2019\n\n\n\nFootnotes\n\n\n  \n    \n      This is the footnote. &#8617;\n    \n  \n\n",
        "url": "/markdown/2020/01/14/test-markdown-post.html"
      },
    
      {
        "title": "Fastpages Notebook Blog Post",
        "excerpt": "\n",
        "content": "\n\n\n        \n\n\nAbout This notebook is a demonstration of some of capabilities of fastpages with notebooks.\nWith fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts!\n\n\n\n\n\n\nFront Matter The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this:\n\n# \"My Title\"\n&gt; \"Awesome summary\"\n\n- toc:true- branch: master\n- badges: true\n- comments: true\n- author: Hamel Husain &amp; Jeremy Howard\n- categories: [fastpages, jupyter]\n\nSetting toc: true will automatically generate a table of contents\nSetting badges: true will automatically include GitHub and Google Colab links to your notebook.\nSetting comments: true will enable commenting on your blog post, powered by utterances.\n\nThe title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README.\n\n\n\n\n\n\nMarkdown Shortcuts \n\n\n\n\n\nA #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post.\nA #hide_input comment at the top of any code cell will only hide the input of that cell.\n\n\n\n\n    \n    \n\n\n\n\n\n\n\n\nThe comment #hide_input was used to hide the code that produced this.\n\n\n\n\n\n\n\n\n    \n\n\n\nput a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it:\n\n\n\n\n    \n    \n\n\n      \n        \n\n\n    \nimport pandas as pd\nimport altair as alt\n\n\n    \n\n\n\n    \n\n    \n\n\n\nput a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it:\n\n\n\n\n    \n    \n\n\n      \n        \n\n\n    \ncars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39;\nmovies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39;\nsp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39;\nstocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39;\nflights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39;\n\n\n    \n\n\n\n    \n\n    \n\n\n\nplace a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it:\n\n\n\n\n    \n    \n\n\n\n\n    \nprint(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;)\n\n\n    \n\n\n\n      \n        \n\n\n\n\n\n\nThe comment #collapse-output was used to collapse the output of this cell by default but you can expand it.\n\n\n\n\n\n\n\n    \n\n    \n\n\n\nInteractive Charts With Altair Charts made with Altair remain interactive.  Example charts taken from this repo, specifically this notebook.\n\n\n\n\n\n\nExample 1: DropDown \n\n\n\n    \n    \n\n\n\n\n    \n# use specific hard-wired values as the initial selected values\nselection = alt.selection_single(\n    name=&#39;Select&#39;,\n    fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;],\n    init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;},\n    bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)}\n)\n  \n# scatter plot, modify opacity based on selection\nalt.Chart(df).mark_circle().add_selection(\n    selection\n).encode(\n    x=&#39;Rotten_Tomatoes_Rating:Q&#39;,\n    y=&#39;IMDB_Rating:Q&#39;,\n    tooltip=&#39;Title:N&#39;,\n    opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05))\n)\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\nExample 2: Tooltips \n\n\n\n    \n    \n\n\n\n\n    \nalt.Chart(df).mark_circle().add_selection(\n    alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;])\n).encode(\n    alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;),\n    alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)),\n#     y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement\n    tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;]\n).properties(\n    width=500,\n    height=400\n)\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\nExample 3: More Tooltips \n\n\n\n    \n    \n\n\n\n\n    \nlabel = alt.selection_single(\n    encodings=[&#39;x&#39;], # limit selection to x-axis value\n    on=&#39;mouseover&#39;,  # select on mouseover events\n    nearest=True,    # select data point nearest the cursor\n    empty=&#39;none&#39;     # empty selection includes no data points\n)\n\n# define our base line chart of stock prices\nbase = alt.Chart().mark_line().encode(\n    alt.X(&#39;date:T&#39;),\n    alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)),\n    alt.Color(&#39;symbol:N&#39;)\n)\n\nalt.layer(\n    base, # base line chart\n    \n    # add a rule mark to serve as a guide line\n    alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode(\n        x=&#39;date:T&#39;\n    ).transform_filter(label),\n    \n    # add circle marks for selected time points, hide unselected points\n    base.mark_circle().encode(\n        opacity=alt.condition(label, alt.value(1), alt.value(0))\n    ).add_selection(label),\n\n    # add white stroked text to provide a legible background for labels\n    base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode(\n        text=&#39;price:Q&#39;\n    ).transform_filter(label),\n\n    # add text labels for stock prices\n    base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode(\n        text=&#39;price:Q&#39;\n    ).transform_filter(label),\n    \n    data=stocks\n).properties(\n    width=500,\n    height=400\n)\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\nData Tables You can display tables per the usual way in your blog:\n\n\n\n\n    \n    \n\n\n\n\n    \ndf[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, \n    &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head()\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n  \n    \n      \n      Title\n      Worldwide_Gross\n      Production_Budget\n      Distributor\n      MPAA_Rating\n      IMDB_Rating\n      Rotten_Tomatoes_Rating\n    \n  \n  \n    \n      0\n      The Land Girls\n      146083.0\n      8000000.0\n      Gramercy\n      R\n      6.1\n      NaN\n    \n    \n      1\n      First Love, Last Rites\n      10876.0\n      300000.0\n      Strand\n      R\n      6.9\n      NaN\n    \n    \n      2\n      I Married a Strange Person\n      203134.0\n      250000.0\n      Lionsgate\n      None\n      6.8\n      NaN\n    \n    \n      3\n      Let's Talk About Sex\n      373615.0\n      300000.0\n      Fine Line\n      None\n      NaN\n      13.0\n    \n    \n      4\n      Slam\n      1087521.0\n      1000000.0\n      Trimark\n      R\n      3.4\n      62.0\n    \n  \n\n\n\n\n\n\n\n\n\n\n    \n\n\n\nImages Local Images You can reference local images and they will be copied and rendered on your blog automatically.  You can include these with the following markdown syntax:\n![](my_icons/fastai_logo.png)\n\n\n\n\n\n\n\n\n\n\n\n\n\nRemote Images Remote images can be included with the following markdown syntax:\n![](https://image.flaticon.com/icons/svg/36/36686.svg)\n\n\n\n\n\n\n\n\n\n\n\n\n\nAnimated Gifs Animated Gifs work, too!\n![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif)\n\n\n\n\n\n\n\n\n\n\n\n\n\nCaptions You can include captions with markdown images like this:\n\n![](https://www.fast.ai/images/fastai_paper/show_batch.png \"Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/\")\n\n\n\n\n\n\n\nOther Elements \n\n\n\n\n\nGitHub Flavored Emojis Typing I give this post two :+1:! will render this:\nI give this post two :+1:!\n\n\n\n\n\n\nTweetcards Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this:\n\n\n    Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with:  pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ&mdash; Jake VanderPlas (@jakevdp) December 11, 2019\n\n\n\n\n\n\n\n\n\n\nYoutube Videos Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this:\n\n\n    \n\n\n\n\n\n\n\n\nBoxes / Callouts Typing &gt; Warning: There will be no second warning! will render this:\n\n    \n    Warning: There will be no second warning!\n\nTyping &gt; Important: Pay attention! It's important. will render this:\n\n    \n    Important: Pay attention! It&#8217;s important.\n\nTyping &gt; Tip: This is my tip. will render this:\n\n    \n    Tip: This is my tip.\n\nTyping &gt; Note: Take note of this. will render this:\n\n    \n    Note: Take note of this.\n\nTyping &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs:\n\n    \n    Note: A doc link to an example website: fast.ai should also work fine.\n\n\n\n\n\n\n\nFootnotes You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this:\n\nFor example, here is a footnote {% fn 1 %}.\nAnd another {% fn 2 %}\n{{ 'This is the footnote.' | fndetail: 1 }}\n{{ 'This is the other footnote. You can even have a [link](www.github.com)!' | fndetail: 2 }}\nFor example, here is a footnote 1.\nAnd another 2\n1. This is the footnote.↩\n2. This is the other footnote. You can even have a link!↩\n\n\n\n\n\n\n",
        "url": "/jupyter/2020/02/20/test.html"
      },
    
  
  
  
  {
    "title": "1. Single file",
    "excerpt": "\n",
    "content": "\n\n\n\n",
    "url": "/1single.html"
  },
  
  {
    "title": "2. Multi-file",
    "excerpt": "\n",
    "content": "\n\n",
    "url": "/2multi.html"
  },
  
  {
    "title": "3. Parallel",
    "excerpt": "\n",
    "content": "\n\n\nThanks to Loreto Parisi for assistance with this implementation.\n\n\n\n",
    "url": "/3parallel.html"
  },
  
  {
    "title": "Home",
    "excerpt": "\n",
    "content": "Simple JS Image Classifiers\n\nLink\n",
    "url": "/"
  }
  
]

